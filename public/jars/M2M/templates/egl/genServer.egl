var connect = require('connect');
var ws = require('websocket.io');
var session = require('./session');
var chat = require('./chat');
var dropbox = require('./dropbox');
var note = require('./note');
var mongoose = require('mongoose');
var models = require('./models');
var db, Message, DropboxNote, Note;

// commands:
//{"auth" : { "user" : "phil", "pass" : "foobar" } }
//{"chat" : { "user" : "phil", "message" : "testing the chat" } }

console.log('Starting main server');

function auth(info, connections, connection, fn) {
	session.authenticate(info, connections, connection, fn);
}

// Models
models.defineModels(mongoose, function() {
	console.log('Connecting to mongodb');
	exports.Message = Message = mongoose.model('Message');
	exports.DropboxNote = DropboxNote = mongoose.model('DropboxNote');
	exports.Note = Note = mongoose.model('Note');
	db = mongoose.connect('mongodb://localhost/thesis');
});

var http = connect.createServer(
	connect.logger(),
	connect.cookieParser(),
	connect.session({ secret: 'keyboard cat' }),
	connect.basicAuth(auth)
).listen(3000);

var server = ws.attach(http);
var connections = [];

server.on('connection', function (socket) {
	//console.log(socket);
	connections.push({'enabled' : 'false', 'user' : '', 'role' : 'user', 'connection' : socket});
	socket.on('message', function (message) {
		for (var i = connections.length - 1; i >= 0; i--) {
			if (connections[i]['connection'] == socket) {
				console.log('Raw message: ' + message);
				try {
					var msg = JSON.parse(message);
				} catch (err) {
					console.log(err);
				}
				
				if (connections[i]['enabled'] == 'false') {
					try {
						if (msg['auth'] != "") {
							console.log('got auth message');
							auth(msg['auth'], connections, connections[i], enableConnection);
						}
					} catch (err) {
						console.log(err);
					}
				} else if (connections[i]['enabled'] == 'true') {
					// Authenticated. We can process the request.
					try {
						if (msg) {
							console.log("parsed msg : " + JSON.stringify(msg));
							if (msg.chat) {
								console.log("got new chat message");
								chat.distributeMessage(msg['chat'], connections);
							} else if (msg.lastMessages) {
								console.log("Got request for last messages");
								chat.getLastMessages(connections[i]);
							} else if (msg.addFileNote) {
								dropbox.addDropboxNote(msg['addFileNote'], connections);
							} else if (msg.getFileNotes) {
								dropbox.getDropboxNotes(msg['getFileNotes'], connections[i]);	
							} else if (msg.addGenericNote) {
								note.addNote(msg['addGenericNote'], connections);
							} else if (msg.getGenericNotes) {
								if (connections[i].role == 'admin') {
									note.getNotes(msg['getGenericNotes'], connections[i]);
								} else {
									console.log('got generic notes request for a non-admin user');
									note.getNotesForUser(msg['getGenericNotes'], connections[i]);
								}
							} else if (msg.getConnectedUsers) {
								session.getConnectedUsers(connections, connections[i]);
							} else if (msg.authed) {
								console.log('Sending new authed message');
								var user = connections[i].user;
								var role = connections[i].role;
								connections[i]['connection'].send('{ "message" : { "type" : "authed", "user" : "' + user + '", "role" : "' + role + '" } }');
							} else if (msg.auth) {
								console.log('Sending new authed message');
								var user = connections[i].user;
								connections[i]['connection'].send('{ "message" : { "type" : "authed", "user" : "' + user + '", "role" : "' + role + '" } }');
							} else if (msg.quit) {
								console.log('Disabling socket connection');
								connections[i]['enabled'] = 'false'
								var logout = {};
								logout['message'] = {};
								logout['message']['type'] = 'logout';
								logout['message']['user'] = connections[i]['user'];
								for (var i = connections.length - 1; i >= 0; i--) {
									connections[i]['connection'].send(JSON.stringify(logout))
								}
							} else {
								connections[i]['connection'].send('{ "message" : { "type" : "error" } }');
							}
						}
					} catch (err) {
						console.log(err);
					}
				}		
			}
		};
	});
	socket.on('close', function () {
		for (var i = connections.length - 1; i >= 0; i--) {
			if (connections[i]['connection'] == socket) {
				console.log('Closing and removing socket connection');
				connections.splice(i, 1);
			}
		};
	});
});

function enableConnection(c, connections, info, error) {
	if (error) {
		c['connection'].send("Wrong username/password");
	} else {
		console.log('connection for user ' + info['user'] + ' established successfully!');
		c['enabled'] = 'true';
		c['user'] = info['user'];
		c['role'] = info['role'];
		authed = [];
		authed['user'] = c['user'];

		var msg = {};
		msg['message'] = {};
		msg['message']['type'] = "authed";
		msg['message']['role'] = info['role'];
		console.log('sending message ' + JSON.stringify(msg));
		c['connection'].send(msg);
		console.log('sent authentication message to user ' + info['user']);
		session.newConnectedUser(connections, c);
	}
}
