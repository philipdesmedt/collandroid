var app = require('./main');

var notes = [];
var n = {};
[% for (c in content) { %]
	[% if (c.ctype == "list" and c.items.isDefined() and c.items.size() > 0) { %]
		[% for (i in c.items) { %]
			n['type'] = "[%= i.type %]";
			n['parent'] = "null";
			n['text'] = "[%= i.text %]";
			n['user'] = "dummy";
			notes.push(n);
		[% } %]
	[% } %]
[% } %]

exports.addNote = function (note, connections) {
	console.log('adding new note: ' + JSON.stringify(note));
	new app.Note({type: note.type, parent: note.parent, text: note.text,
		user: note.user, date: new Date()}).save(function(err) {
		if (err) {
			console.log(err);
			console.log('couldn\'t save note');
		} else {
			var no = {};
			no['message'] = {};
			if (note.parent != "null") {
				no['message']['type'] = "genchild";
				no['message']['genericType'] = note.type;
			} else {
				no['message']['type'] = note.type;
			}
			no['message']['parent'] = note.parent;
			no['message']['user'] = note.user;
			no['message']['message'] = note.text;
			console.log(JSON.stringify(no));
			for (var i = connections.length - 1; i >= 0; i--) {
				connections[i]['connection'].send(JSON.stringify(no))
			}
			console.log(note.user + ' is creating note "' + note.text + '"');
		}
	});
}

exports.initNotes = function () {
	for (n in notes) {
		var note = notes[n];
		new app.Note({type: note.type, parent: note.parent, text: note.text,
			user: note.user, date: new Date()}).save(function(err) {
			if (err) {
				console.log(err);
				console.log('couldn\'t save note');
			}
		});
	}
}

exports.getNotes = function (note, connection) {
	var parent = "null";
	var type = note.type;
	if (note.parent != "null") {
		console.log("Request for notes with parent " + note.parent);
		parent = note.parent;
		type = "genchild";
	}
	app.Note.find({type: note.type, parent: parent}, function (err, notes) {
		for (var i = 0; i < notes.length; i++) {
			var no = {};
			no['message'] = {};
			no['message']['type'] = type;
			if (type == "genchild") {
				no['message']['genericType'] = note.type;
			}
			no['message']['parent'] = parent;
			no['message']['user'] = notes[i].user;
			no['message']['message'] = notes[i].text;
			console.log(JSON.stringify(no));
			connection['connection'].send(JSON.stringify(no));
		}
	});
}

exports.getNotesForUser = function (note, connection) {
	var parent = "null";
	var type = note.type;
	if (note.parent != "null") {
		console.log("Request for notes with parent " + note.parent);
		parent = note.parent;
		type = "genchild";
		app.Note.find({type: note.type, parent: parent, user: connection.user}, function (err, notes) {
			for (var i = 0; i < notes.length; i++) {
				var no = {};
				no['message'] = {};
				no['message']['type'] = type;
				if (type == "genchild") {
					no['message']['genericType'] = note.type;
				}
				no['message']['parent'] = parent;
				no['message']['user'] = notes[i].user;
				no['message']['message'] = notes[i].text;
				console.log(JSON.stringify(no));
				connection['connection'].send(JSON.stringify(no));
			}
		});
	} else {
		app.Note.find({type: note.type, parent: parent}, function (err, notes) {
			for (var i = 0; i < notes.length; i++) {
				var no = {};
				no['message'] = {};
				no['message']['type'] = type;
				if (type == "genchild") {
					no['message']['genericType'] = note.type;
				}
				no['message']['parent'] = parent;
				no['message']['user'] = notes[i].user;
				no['message']['message'] = notes[i].text;
				console.log(JSON.stringify(no));
				connection['connection'].send(JSON.stringify(no));
			}
		});
	}
}
